name: Build OpenWrt Packages

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

env:
  TZ: Asia/Shanghai
  
jobs:
  build:
    permissions:
      contents: write
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Install dependencies
        run: |
          sudo -E apt-get -qq update
          sudo -E apt-get -qq install zstd build-essential clang flex bison g++ gawk gcc-multilib g++-multilib gettext git libncurses5-dev python3-venv rsync unzip zlib1g-dev file wget
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean

      - name: Install CMake >= 3.31
        run: |
          echo "Install CMake = 3.31.9"
          sudo apt-get update
          sudo apt-get install -y wget
          wget https://github.com/Kitware/CMake/releases/download/v3.31.9/cmake-3.31.9-linux-x86_64.sh
          sudo sh cmake-3.31.9-linux-x86_64.sh --skip-license --prefix=/usr/local
          echo "/usr/local/bin" >> $GITHUB_PATH

      - name: Cache OpenWrt SDK
        id: cache-sdk
        uses: actions/cache@v3
        with:
          path: sdk
          key: openwrt-sdk-snapshot-x86-64
          
      - name: Initialization environment
        if: steps.cache-sdk.outputs.cache-hit != 'true'
        env:
          url_sdk: https://archive.openwrt.org/releases/24.10.3/targets/x86/64/openwrt-sdk-24.10.3-x86-64_gcc-13.3.0_musl.Linux-x86_64.tar.zst
        run: |
          wget ${{ env.url_sdk }}
          file_name=$(echo ${{env.url_sdk}} | awk -F/ '{print $NF}')
          mkdir sdk && tar --zstd -xvf $file_name -C ./sdk --strip-components=1
          cd sdk  
          echo "src-git base https://github.com/openwrt/openwrt.git;main" > feeds.conf
          echo "src-git-full packages https://github.com/openwrt/packages.git;master" >> feeds.conf
          echo "src-git-full luci https://github.com/openwrt/luci.git;master" >> feeds.conf
          echo "src-git-full routing https://git.openwrt.org/feed/routing.git;master"  >> feeds.conf
          rm -rf package/luci-app-advanced-reboot
          git clone --depth=1 https://github.com/stangri/luci-app-advanced-reboot.git package/luci-app-advanced-reboot
          git clone -b master https://github.com/jerrykuku/luci-theme-argon.git package/luci-theme-argon
          git clone --depth=1 https://github.com/muink/luci-app-natmapt.git package/luci-app-natmapt
          git clone --depth=1 https://github.com/xiaorouji/openwrt-passwall2.git package/luci-app-passwall2
          git clone --depth=1 https://github.com/gSpotx2f/luci-app-cpu-status.git package/luci-app-cpu-status
          git clone --depth=1 https://github.com/gSpotx2f/luci-app-log.git package/luci-app-log
          ./scripts/feeds update -a
          echo "CONFIG_PACKAGE_luci-theme-argon=m" > .config
          echo "CONFIG_PACKAGE_luci-app-advanced-reboot=m" >> .config
          echo "CONFIG_PACKAGE_luci-app-natmapt=m" > .config
          echo "CONFIG_PACKAGE_luci-app-passwall2=m" > .config
          echo "CONFIG_PACKAGE_luci-app-cpu-status=m" > .config
          echo "CONFIG_PACKAGE_luci-app-log-viewer=m" > .config
          ./scripts/feeds install -d n luci-theme-argon
          ./scripts/feeds install -d n luci-app-advanced-reboot
          ./scripts/feeds install -d n luci-app-natmapt
          ./scripts/feeds install -d n luci-app-passwall2
          ./scripts/feeds install -d n luci-app-cpu-status
          ./scripts/feeds install -d n luci-app-log-viewer
          make download -j$(nproc)

      - name: Configure packages
        run: |
          cd sdk
          ./scripts/feeds install luci-theme-argon
          ./scripts/feeds install -f luci-app-advanced-reboot
          ./scripts/feeds install luci-app-natmapt
          ./scripts/feeds install luci-app-passwall2
          ./scripts/feeds install luci-app-cpu-status
          ./scripts/feeds install luci-app-log-viewer
          echo "CONFIG_ALL_NONSHARED=n" > .config
          echo "CONFIG_ALL_KMODS=n" >> .config
          echo "CONFIG_ALL=n" >> .config
          echo "CONFIG_AUTOREMOVE=n" >> .config
          echo "CONFIG_LUCI_LANG_zh_Hans=y" >> .config
          echo "CONFIG_PACKAGE_luci-theme-argon=m" >> .config
          echo "CONFIG_PACKAGE_luci-app-advanced-reboot=m" >> .config
          echo "CONFIG_PACKAGE_luci-app-natmapt=m" > .config
          echo "CONFIG_PACKAGE_luci-app-passwall2=m" > .config
          echo "CONFIG_PACKAGE_luci-app-cpu-status=m" > .config
          echo "CONFIG_PACKAGE_luci-app-log-viewer=m" > .config
          make defconfig
          
      - name: Compile packages from targets.txt
        id: compile
        run: |
          cd sdk
          while read pkg; do
            [ -z "$pkg" ] && continue
            echo "=== Building $pkg ==="
            if [ -d "package/$pkg" ]; then
              make package/$pkg/{clean,compile} -j"$(nproc)" V=s
            else
              echo "ERROR: package/$pkg not found. Ensure clone step uses this exact directory name."
              exit 1
            fi
          done < ../targets.txt
          mv bin/packages/x86_64/base/ ../
          rm .config .config.old
          cd ..
          
      - name: Generate Packages index
        run: |
          # x86_64/base 路径为 SDK 的默认输出之一，生成索引
          outdir=$(echo bin/packages/*/base)
          cd "$outdir"
          ../../../../staging_dir/host/bin/opkg-make-index . > Packages
          gzip -9c Packages > Packages.gz
          ls -la

      - name: Upload release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: latest
          name: Latest packages
          files: |
            bin/packages/*/base/*.ipk
            bin/packages/*/base/Packages*
