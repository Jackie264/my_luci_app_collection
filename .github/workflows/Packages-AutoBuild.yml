name: Packages-AutoBuild

on:
  workflow_dispatch:
  push:
    branches: [ main ]
env:
  TZ: Asia/Shanghai

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        target: [aarch64_cortex-a53, arm_cortex-a7_neon-vfpv4, x86_64]

    steps:
    - name: Checkout
      uses: actions/checkout@v5
      with:
        fetch-depth: 0

    - name: Free disk space
      uses: coder-xiaomo/free-disk-space@main
      with:
        tool-cache: false
        android: true
        dotnet: true
        haskell: true
        large-packages: true
        docker-images: true
        swap-storage: true

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install build-essential libncurses-dev zlib1g-dev gawk git \
        gettext libssl-dev xsltproc rsync wget unzip \
        llvm python3-pyelftools libpython3-dev aria2 jq qemu-utils rename \
        libelf-dev libgmp3-dev libmpc-dev libfuse-dev bc autopoint cups-ppdc
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "Asia/Shanghai"

    - name: Get current date
      id: date
      run: |
        echo "date=$(date +'%m/%d_%Y_%H/%M')" >> $GITHUB_ENV
        echo "date2=$(date +'%m/%d %Y')" >> $GITHUB_ENV
        echo "date3=$(date +'%m.%d')" >> $GITHUB_ENV

#    - name: Clone source code
#      run: |
#        set -v
#        REPO_BRANCH="24.10-SNAPSHOT"
#        echo "$REPO_BRANCH"
#        if [ ${{matrix.target}} == "x86_64" ]; then
#            curl -fL -o sdk.tar.zst https://downloads.openwrt.org/releases/$REPO_BRANCH/targets/x86/64/openwrt-sdk-$REPO_BRANCH-x86-64_gcc-13.3.0_musl.Linux-x86_64.tar.zst
#        elif [ ${{matrix.target}} == "aarch64_cortex-a53" ]; then
#            curl -fL -o sdk.tar.zst https://downloads.openwrt.org/releases/$REPO_BRANCH/targets/qualcommax/ipq807x/openwrt-sdk-$REPO_BRANCH-qualcommax-ipq807x_gcc-13.3.0_musl.Linux-x86_64.tar.zst
#        elif [[ ${{matrix.target}} == "arm_cortex-a7_neon-vfpv4" ]]; then
#            curl -fL -o sdk.tar.zst https://downloads.openwrt.org/releases/$REPO_BRANCH/targets/ipq40xx/generic/openwrt-sdk-$REPO_BRANCH-ipq40xx-generic_gcc-13.3.0_musl_eabi.Linux-x86_64.tar.zst
#        fi
        
    - name: Select SDK URL
      id: sdk
      run: |
        REPO_BRANCH="24.10.3"   # 固定 release 分支，保证内核匹配
        case "${{ matrix.target }}" in
          aarch64_cortex-a53)
            echo "url=https://downloads.openwrt.org/releases/$REPO_BRANCH/targets/qualcommax/ipq807x/openwrt-sdk-$REPO_BRANCH-qualcommax-ipq807x_gcc-13.3.0_musl.Linux-x86_64.tar.zst" >> $GITHUB_OUTPUT
            ;;
          arm_cortex-a7_neon-vfpv4)
            echo "url=https://downloads.openwrt.org/releases/$REPO_BRANCH/targets/ipq40xx/generic/openwrt-sdk-$REPO_BRANCH-ipq40xx-generic_gcc-13.3.0_musl_eabi.Linux-x86_64.tar.zst" >> $GITHUB_OUTPUT
            ;;
          x86_64)
            echo "url=https://downloads.openwrt.org/releases/$REPO_BRANCH/targets/x86/64/openwrt-sdk-$REPO_BRANCH-x86-64_gcc-13.3.0_musl.Linux-x86_64.tar.zst" >> $GITHUB_OUTPUT
            ;;
        esac

    - name: Download and extract SDK
      run: |
        curl -fL -o sdk.tar.zst "${{ steps.sdk.outputs.url }}"
        mkdir openwrt
        tar --zstd -xf sdk.tar.zst -C openwrt --strip-components=1

    - name: Free up disk space
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo mkdir -p -m 777 openwrt /mnt/openwrt/staging_dir /mnt/openwrt/build_dir /mnt/openwrt/bin  /mnt/openwrt/dl
        ln -sf /mnt/openwrt/staging_dir openwrt/staging_dir
        ln -sf /mnt/openwrt/bin openwrt/bin
        ln -sf /mnt/openwrt/dl openwrt/dl
        ln -sf /mnt/openwrt/build_dir openwrt/build_dir
        df -hT

    - name: Update & install feeds
      run: |
        cd openwrt
        ./scripts/feeds update -a
        ./scripts/feeds install -a

    - name: Patch golang feed (use sbwml)
      run: |
        cd openwrt/feeds/packages/lang
        rm -rf golang
        git clone https://github.com/sbwml/packages_lang_golang -b 25.x golang

    - name: Patch rust feed (use grandway2025)
      run: |
        cd openwrt/feeds/packages/lang
        rm -rf rust
        git clone https://github.com/grandway2025/packages_lang_rust -b 1.85.0 rust
        cd rust
        # 强制禁用 download-ci-llvm，避免 CI 上报错或 404
        grep -rl "download-ci-llvm = true" . | xargs -r sed -i 's/download-ci-llvm = true/download-ci-llvm = false/'
        echo "✅ Feed rust config patched (download-ci-llvm disabled)."

    - name: Copy packages
      run: |
        rsync -a --exclude 'openwrt' ./ openwrt/package/

    - name: Disable uboot packages
      run: |
        cd openwrt
        touch .config
        sed -i '/CONFIG_PACKAGE_uboot/d' .config
        for pkg in $(ls feeds/base/package/boot | grep uboot-fritz); do
          echo "# CONFIG_PACKAGE_${pkg} is not set" >> .config
        done
        echo "# CONFIG_PACKAGE_uboot-envtools is not set" >> .config

    - name: Remove all u-boot-fritz packages
      run: |
        cd openwrt/feeds/base/package/boot
        rm -rf uboot-fritz*
        
    - name: Compile repo packages
      run: |
        cd openwrt
        make defconfig
        # 在 build_dir 里二次修正 config.toml，确保生效
        echo ""
        echo ""
        echo "🔧 Checking build_dir for config.toml..."
        find build_dir/ -type f -path "*/rustc-*/config.toml" \
          -exec sed -i 's/download-ci-llvm = true/download-ci-llvm = false/' {} +
        echo "✅ After patch, showing all download-ci-llvm lines:"
        grep -R --color=always "download-ci-llvm" build_dir/ || echo "No config.toml found yet."
        echo ""
        echo ""
        for pkg in $(ls ../ | grep -v '^\.github$' | grep -v '^openwrt$'); do
          if [ -d "../$pkg" ] && [ -f "../$pkg/Makefile" ]; then
            echo ">>> Building package: $pkg"
            cp -r ../$pkg package/
            make package/$pkg/compile -j$(nproc) || make package/$pkg/compile V=s
          fi
        done

    - name: Generate feed index
      run: |
        mkdir -p artifacts/${{ matrix.target }}
        PKG_DIR="artifacts/${{ matrix.target }}"
        # 收集所有 ipk
        find openwrt/bin/packages/ -name "*.ipk" -exec cp {} $PKG_DIR/ \;
        cd $PKG_DIR
        # 生成 Packages 索引
        opkg-make-index . > Packages
        gzip -9nc Packages > Packages.gz
        cp Packages Packages.manifest

    - name: Sign feed index
      run: |
        cd artifacts/${{ matrix.target }}
        echo "${{ secrets.USIGN_SECRET }}" > usign.key
        ../../openwrt/staging_dir/host/bin/usign -S -m Packages -s usign.key -x Packages.sig
        rm -f usign.key

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      if: github.ref == 'refs/heads/main'
      with:
        tag_name: packages-${{ github.run_number }}
        name: "Packages Build #${{ github.run_number }} 🚀"
        body: |
          自动构建的 OpenWrt 包合集
          - 架构: ${{ matrix.target }}
          - SDK: 24.10.3
          - 时间: $(date +'%Y-%m-%d %H:%M:%S')
        files: artifacts/${{ matrix.target }}/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
