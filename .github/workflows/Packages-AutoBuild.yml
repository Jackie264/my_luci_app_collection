name: Packages-AutoBuild

on:
  workflow_dispatch:
  push:
    branches: [ main ]
env:
  TZ: Asia/Shanghai

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        target: [aarch64_cortex-a53, arm_cortex-a7_neon-vfpv4, x86_64]

    steps:
    - name: Checkout
      uses: actions/checkout@v5
      with:
        fetch-depth: 0

    - name: Free disk space
      uses: coder-xiaomo/free-disk-space@main
      with:
        tool-cache: false
        android: true
        dotnet: true
        haskell: true
        large-packages: true
        docker-images: true
        swap-storage: true

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install build-essential libncurses-dev zlib1g-dev gawk git \
        gettext libssl-dev xsltproc rsync wget unzip \
        llvm python3-pyelftools libpython3-dev aria2 jq qemu-utils rename \
        libelf-dev libgmp3-dev libmpc-dev libfuse-dev bc autopoint cups-ppdc
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "Asia/Shanghai"

    - name: Get current date
      id: date
      run: |
        echo "date=$(date +'%m/%d_%Y_%H/%M')" >> $GITHUB_ENV
        echo "date2=$(date +'%m/%d %Y')" >> $GITHUB_ENV
        echo "date3=$(date +'%m.%d')" >> $GITHUB_ENV
        
    - name: Select SDK URL
      id: sdk
      run: |
        REPO_BRANCH="24.10.3"   # 固定 release 分支，保证内核匹配
        case "${{ matrix.target }}" in
          aarch64_cortex-a53)
            echo "url=https://downloads.openwrt.org/releases/$REPO_BRANCH/targets/qualcommax/ipq807x/openwrt-sdk-$REPO_BRANCH-qualcommax-ipq807x_gcc-13.3.0_musl.Linux-x86_64.tar.zst" >> $GITHUB_OUTPUT
            ;;
          arm_cortex-a7_neon-vfpv4)
            echo "url=https://downloads.openwrt.org/releases/$REPO_BRANCH/targets/ipq40xx/generic/openwrt-sdk-$REPO_BRANCH-ipq40xx-generic_gcc-13.3.0_musl_eabi.Linux-x86_64.tar.zst" >> $GITHUB_OUTPUT
            ;;
          x86_64)
            echo "url=https://downloads.openwrt.org/releases/$REPO_BRANCH/targets/x86/64/openwrt-sdk-$REPO_BRANCH-x86-64_gcc-13.3.0_musl.Linux-x86_64.tar.zst" >> $GITHUB_OUTPUT
            ;;
        esac

    - name: Download and extract SDK
      run: |
        curl -fL -o sdk.tar.zst "${{ steps.sdk.outputs.url }}"
        mkdir openwrt
        tar --zstd -xf sdk.tar.zst -C openwrt --strip-components=1

    - name: Free up disk space
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo mkdir -p -m 777 openwrt /mnt/openwrt/staging_dir /mnt/openwrt/build_dir /mnt/openwrt/bin  /mnt/openwrt/dl
        ln -sf /mnt/openwrt/staging_dir openwrt/staging_dir
        ln -sf /mnt/openwrt/bin openwrt/bin
        ln -sf /mnt/openwrt/dl openwrt/dl
        ln -sf /mnt/openwrt/build_dir openwrt/build_dir
        df -hT

    - name: Update & install feeds
      run: |
        cd openwrt
        ./scripts/feeds update -a
        ./scripts/feeds install -a

    - name: Patch golang feed (use sbwml)
      run: |
        cd openwrt/feeds/packages/lang
        rm -rf golang
        git clone https://github.com/sbwml/packages_lang_golang -b 25.x golang

    - name: Use upstream rust feed (from repo)
      run: |
        echo "🔄 Replacing SDK rust feed with repo's lang/rust..."
        rm -rf openwrt/feeds/packages/lang/rust
        cp -r rust openwrt/feeds/packages/lang/
        echo "✅ Rust feed replaced with repo version"
        grep "llvm.download-ci-llvm" openwrt/feeds/packages/lang/rust/Makefile || echo "ℹ️ No llvm.download-ci-llvm line found (likely >=1.90.0)"
        echo ""
        
#    - name: Patch rust feed
#      run: |
#        cd openwrt/feeds/packages/lang/rust
#        # 强制禁用 download-ci-llvm，避免 CI 上报错或 404
#        sed -i 's/--set=llvm.download-ci-llvm *= *true/--set=llvm.download-ci-llvm=false/g' Makefile
#        echo "✅ Feed rust config patched (download-ci-llvm disabled)."
#        grep "llvm.download-ci-llvm" Makefile || echo "No llvm.download-ci-llvm line found."
#        echo ""

    - name: Patch rust Makefile to clean .orig files
      run: |
        echo "🔧 Patching feeds/packages/lang/rust/Makefile ..."
        cat >> openwrt/feeds/packages/lang/rust/Makefile <<'EOF'

        define Build/Prepare
          $(call Build/Prepare/Default)
          find $(PKG_BUILD_DIR)/vendor -name '*.orig' -delete || true
        endef
        EOF
        echo "✅ Patch applied to rust Makefile"
        
    - name: Copy packages
      run: |
        rsync -a --exclude 'openwrt' --exclude 'rust' ./ openwrt/package/

    - name: Disable uboot packages
      run: |
        cd openwrt
        touch .config
        sed -i '/CONFIG_PACKAGE_uboot/d' .config
        for pkg in $(ls feeds/base/package/boot | grep uboot-fritz); do
          echo "# CONFIG_PACKAGE_${pkg} is not set" >> .config
        done
        echo "# CONFIG_PACKAGE_uboot-envtools is not set" >> .config

    - name: Remove all u-boot-fritz packages
      run: |
        cd openwrt/feeds/base/package/boot
        rm -rf uboot-fritz*

    - name: Compile repo packages
      run: |
        cd openwrt
        make defconfig
        for pkg in $(ls ../ | grep -v '^\.github$' | grep -v '^openwrt$' | grep -v '^rust$'); do
          if [ -d "../$pkg" ] && [ -f "../$pkg/Makefile" ]; then
            echo ">>> Building package: $pkg"
            cp -r ../$pkg package/
            make package/$pkg/compile -j$(nproc) || make package/$pkg/compile V=s
          fi
        done

    - name: Generate feed index
      run: |
        mkdir -p artifacts/${{ matrix.target }}
        PKG_DIR="artifacts/${{ matrix.target }}"
        find openwrt/bin/packages/ -name "*.ipk" -exec cp {} $PKG_DIR/ \;
        cd $PKG_DIR
        # 使用 SDK 自带的 ipkg-make-index.sh 生成索引
        ../../openwrt/staging_dir/host/bin/ipkg-make-index.sh . > Packages
        gzip -9nc Packages > Packages.gz
        cp Packages Packages.manifest
        echo "✅ Feed index generated with ipkg-make-index.sh"

    - name: Sign feed index
      run: |
        cd artifacts/${{ matrix.target }}
        echo "${{ secrets.USIGN_SECRET }}" > usign.key
        ../../openwrt/staging_dir/host/bin/usign -S -m Packages -s usign.key -x Packages.sig
        rm -f usign.key

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      if: github.ref == 'refs/heads/main'
      with:
        tag_name: packages-${{ github.run_number }}
        name: "Packages Build #${{ github.run_number }} 🚀"
        body: |
          自动构建的 OpenWrt 包合集
          - 架构: ${{ matrix.target }}
          - SDK: 24.10.3
          - 时间: $(date +'%Y-%m-%d %H:%M:%S')
        files: artifacts/${{ matrix.target }}/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
