name: Auto distribuild feeds

on:
  workflow_run:
    workflows: ["Auto compile with openwrt sdk"]
    types:
      - completed
  workflow_dispatch:

permissions:
  contents: write

jobs:
  distribuild:
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'workflow_run' &&
       github.event.workflow_run.conclusion == 'success' &&
       github.event.workflow_run.head_branch == 'main') ||
      (github.event_name == 'workflow_dispatch' &&
       github.ref == 'refs/heads/main')

    steps:
      - uses: actions/checkout@v4
      
      - name: Build usign
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake git
          git clone https://git.openwrt.org/project/usign.git
          cd usign
          cmake .
          make
          sudo cp usign /usr/local/bin/
          
      - name: Get latest release tag
        id: get_release
        run: |
          tag=$(gh release list --limit 1 --json tagName --jq '.[0].tagName')
          echo "tag=$tag" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Download release assets
        run: |
          mkdir release_assets
          gh release download ${{ steps.get_release.outputs.tag }} --dir release_assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Restore signing key
        run: |
          echo "${{ secrets.FEED_SIGNING_KEY }}" | base64 -d > key-build
          chmod 600 key-build
          
      - name: Prepare feed directories
        env:
          FEED_VERSION: 24.10.3
        run: |
          mkdir -p public/${FEED_VERSION}

          for arch in x86_64 aarch64_cortex-a53 arm_cortex-a7_neon-vfpv4; do
            mkdir -p public/${FEED_VERSION}/${arch}

            cp release_assets/luci-*.ipk public/${FEED_VERSION}/${arch}/ 2>/dev/null || true
            cp release_assets/natmapt-*.ipk public/${FEED_VERSION}/${arch}/ 2>/dev/null || true
            cp release_assets/*${arch}*.ipk public/${FEED_VERSION}/${arch}/ 2>/dev/null || true

            if [ "$(ls -A public/${FEED_VERSION}/${arch}/*.ipk 2>/dev/null)" ]; then
              (
                cd public/${FEED_VERSION}/${arch}
                rm -f Packages Packages.gz
                for ipk in *.ipk; do
                  [ -f "$ipk" ] || continue
                  echo "Package: ${ipk}"
                  filetype=$(file -b "$ipk")
                  if echo "$filetype" | grep -q "current ar archive"; then
                    ar p "$ipk" control.tar.gz | tar -xzO ./control 2>/dev/null
                  else
                    tar -Oxf "$ipk" ./control.tar.gz 2>/dev/null | tar -xzO ./control 2>/dev/null || \
                    tar -Oxf "$ipk" ./control.tar.xz 2>/dev/null | tar -xJO ./control 2>/dev/null
                  fi
                  echo
                done > Packages
                usign -S -m Packages -s $GITHUB_WORKSPACE/key-build -x Packages.sig
                gzip -9nc Packages > Packages.gz
              )
            fi
      
            {
              echo "<html><head><meta charset='utf-8'><title>Feed for ${arch}</title></head><body>"
              echo "<h1>Packages for ${arch}</h1><ul>"
              for f in $(ls public/${FEED_VERSION}/${arch}); do
                echo "<li><a href=\"$f\">$f</a></li>"
              done
              echo "</ul></body></html>"
            } > public/${FEED_VERSION}/${arch}/index.html
          done

          {
            echo "<html><head><meta charset='utf-8'><title>Feed ${FEED_VERSION}</title></head><body>"
            echo "<h1>Feed version ${FEED_VERSION}</h1><ul>"
            for arch in $(ls public/${FEED_VERSION}); do
              echo "<li><a href=\"$arch/\">$arch</a></li>"
            done
            echo "</ul></body></html>"
          } > public/${FEED_VERSION}/index.html

          {
            echo "<html><head><meta charset='utf-8'><title>OpenWrt Feeds</title></head><body>"
            echo "<h1>Available Feeds</h1><ul>"
            for ver in $(ls public); do
              if [ -d "public/$ver" ]; then
                echo "<li><a href=\"$ver/\">$ver</a></li>"
              fi
            done
            echo "<li><a href=\"latest.txt\">latest.txt (points to 24.10.3)</a></li>"
            echo "</ul></body></html>"
          } > public/index.html
          
          echo "${FEED_VERSION}" > public/latest.txt
          
      - name: Deploy feed to GitHub Pages
        run: |
          cd public
          git init -b gh-pages
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add .
          git commit -m "Update feed $(date +'%Y-%m-%d %H:%M:%S')"
          git remote add origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
          git push -f origin gh-pages
