#
# Copyright (c) 2022-2023 SMALLPROGRAM <https://github.com/smallprogram>
# Description: Auto compile
#
name: "Auto compile with openwrt sdk"
permissions:
  contents: read
on:
  push:
    branches:
      - main
    paths:
      - '**/Makefile'
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'
env:
  TZ: Asia/Shanghai
  passwall2: Jackie264/openwrt-passwall2
  passwall2packs: Jackie264/openwrt-passwall-packages
  vlmcsd: Jackie/vlmscd


jobs:
  job_check:
    name: Check Version
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      release_time: ${{ steps.build_tag.outputs.tag }}
      has_update: ${{ steps.check_versions.outputs.has_update }}
      prerelease: ${{ steps.check_versions.outputs.prerelease }}
    steps:
      - name: Checkout
        uses: actions/checkout@main
        with:
          fetch-depth: 0
          ref: ${{ github.ref_name }}

      - name: Ensure submodules are initialized
        run: |
          git submodule sync --recursive
          git submodule update --init --recursive

      - name: Check versions
        id: check_versions
        run: |
          cd packages
          prerelease=$([ "${{ github.ref_name }}" == "main" ] && echo false || echo true)
          out="${GITHUB_WORKSPACE}/release.txt"
          echo "## :mega:Update content" > "$out"
          echo "### LuCI Packages Info" >> "$out"
          echo "**Package name**|**Version**" >> "$out"
          echo "-|-" >> "$out"

          for pkg in */luci-* luci-*; do
            if [ -f "$pkg/Makefile" ]; then
              pkgname=$(basename "$pkg")
              version=$(awk -F ':=' '/PKG_VERSION|PKG_RELEASE/ {print $2}' "$pkg/Makefile" \
                | sed ':a;N;s/\$(PKG_VERSION)-//;s/\n$//;s/\n/-/;ba')

              if [ -z "$version" ]; then
                echo "⚠️ $pkg 没有定义 PKG_VERSION，使用unknown..." >&2
                version="unknown"
              fi
              
              echo "**:minidisc: $pkgname**|**$version**" >> "$out"
            fi
          done

          echo "has_update=true" >> $GITHUB_OUTPUT
          echo "prerelease=${prerelease}" >> $GITHUB_OUTPUT
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Prepare release
        id: prepare
        if: steps.check_versions.outputs.has_update == 'true'
        run: |
          # release.txt 已经生成，这里只保证存在
          touch release.txt
          echo "status=success" >> $GITHUB_OUTPUT
          
      - name: Set build tag
        id: build_tag
        if: steps.prepare.outputs.status == 'success'
        run: echo "tag=$(date +'%Y%m%d-%H%M%S')" >> $GITHUB_OUTPUT
        
      - name: Generate new tag & release
        if: steps.prepare.outputs.status == 'success'
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{steps.build_tag.outputs.tag}}
          target_commitish: ${{ github.ref_name }}
          name: Release (${{ steps.build_tag.outputs.tag }})
          prerelease: ${{steps.check_versions.outputs.prerelease}}
          body_path: release.txt

      - name: Upload release.txt
        uses: actions/upload-artifact@v4
        with:
          name: release-info
          path: release.txt

  job_build_luci_pack:
    name: Build luci packages [${{ matrix.luci_ver }}]
    permissions:
      contents: write
    needs: job_check
    if: needs.job_check.outputs.has_update == 'true'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - sdk_ver: "24.10"
            luci_ver: "24.10"
            sdk_url: https://downloads.openwrt.org/releases/24.10.3/targets/x86/64/openwrt-sdk-24.10.3-x86-64_gcc-13.3.0_musl.Linux-x86_64.tar.zst
    steps:
      - name: Install packages
        run: |
          sudo -E rm -rf /usr/share/dotnet /etc/mysql /etc/php /usr/local/lib/android
          echo "Install packages"
          sudo -E apt-get -qq update
          sudo -E apt-get -qq install ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential \
            bzip2 ccache clang cmake cpio curl device-tree-compiler ecj fastjar flex gawk gettext gcc-multilib \
            g++-multilib git gnutls-dev gperf haveged help2man intltool lib32gcc-s1 libc6-dev-i386 libelf-dev \
            libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses-dev libpython3-dev \
            libreadline-dev libssl-dev libtool libyaml-dev libz-dev lld llvm lrzsz mkisofs msmtp nano \
            ninja-build p7zip p7zip-full patch pkgconf python3 python3-pip python3-ply python3-docutils \
            python3-pyelftools qemu-utils re2c rsync scons squashfs-tools subversion swig texinfo uglifyjs \
            upx-ucl unzip vim wget xmlto xxd zlib1g-dev zstd
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean
          
      - name: Checkout
        uses: actions/checkout@main
        with:
          fetch-depth: 0
          ref: ${{ github.ref_name }}

      - name: Ensure submodules are initialized
        run: |
          git submodule sync --recursive
          git submodule update --init --recursive
          
      - name: Initialization environment
        if: steps.cache-sdk.outputs.cache-hit != 'true'
        run: |
          wget ${{ matrix.sdk_url }}
          file_name=$(echo ${{ matrix.sdk_url }} | awk -F/ '{print $NF}')
          mkdir sdk
          if [[ $file_name == *.tar.xz ]]; then
            tar -xJf $file_name -C ./sdk --strip-components=1
          elif [[ $file_name == *.tar.zst ]]; then
            tar --zstd -x -f $file_name -C ./sdk --strip-components=1
          else
            echo "Unsupported file format: $file_name"
            exit 1
          fi
          cd sdk

          cat > feeds.conf.default << EOF
          src-git passwall_packages https://github.com/${{ env.passwall2packs }}.git;main
          src-link mypackage ${GITHUB_WORKSPACE}/packages
          src-git base https://github.com/openwrt/openwrt.git;openwrt-${{ matrix.sdk_ver }}
          src-git packages https://github.com/openwrt/packages.git;openwrt-${{ matrix.sdk_ver }}
          src-git luci https://github.com/openwrt/luci.git;openwrt-${{ matrix.luci_ver }}
          src-git routing https://github.com/openwrt/routing.git;openwrt-${{ matrix.sdk_ver }}
          src-git telephony https://github.com/openwrt/telephony.git;openwrt-${{ matrix.sdk_ver }}
          EOF
          
          ./scripts/feeds update -a
          ./scripts/feeds install -a
          
          #--------------------------------------begin_patches------------------------------------------
          echo "Start applying the patch"

          rm -rf temp_resp
          git clone -b master --single-branch https://github.com/openwrt/packages.git temp_resp
          cd temp_resp
          git checkout 2b99cd7d7637da0f152da378994f699aaf0dd44d
          cd ..
          echo "update golang version"
          rm -rf feeds/packages/lang/golang
          cp -r temp_resp/lang/golang feeds/packages/lang
          echo "update rust version"
          rm -rf feeds/packages/lang/rust
          cp -r temp_resp/lang/rust feeds/packages/lang
          rm -rf temp_resp

          echo "Patch application completed"
          #--------------------------------------end_patches--------------------------------------------

      - name: Generate luci.mk patch then apply
        run: |
          echo " "
          echo " "
          echo "Generate luci.mk patch then apply it..."
          chmod +x scripts/gen-luci-mk-patch.sh
          scripts/gen-luci-mk-patch.sh
          git apply -p0 patches/0001-fix-luci-mk-include.patch
          echo " "
          echo " "
          
      - name: Compile luci-packages
        id: compile
        run: |
          cd sdk
          echo "CONFIG_ALL_NONSHARED=n" > .config
          echo "CONFIG_ALL_KMODS=n" >> .config
          echo "CONFIG_ALL=n" >> .config
          echo "CONFIG_AUTOREMOVE=n" >> .config
          echo "CONFIG_LUCI_LANG_zh_Hans=n" >> .config
          echo "CONFIG_PACKAGE_luci-app-adguardhome=m" >> .config
          echo "CONFIG_PACKAGE_luci-app-advanced-reboot=m" >> .config
          echo "CONFIG_PACKAGE_luci-app-cpu-status=m" >> .config
          echo "CONFIG_PACKAGE_luci-app-log-viewer=m" >> .config
          echo "CONFIG_PACKAGE_luci-app-natmapt=m" >> .config
          echo "CONFIG_PACKAGE_luci-app-passwall2=m" >> .config
          echo "CONFIG_PACKAGE_luci-app-temp-status=m" >> .config
          echo "CONFIG_PACKAGE_luci-app-vlmcsd=m" >> .config
          echo "CONFIG_PACKAGE_luci-theme-argon=m" >> .config
          make defconfig
          echo " "
          echo "make package/luci-app-adguardhome/{clean,compile} -j$(nproc)"
          make package/luci-app-adguardhome/{clean,compile} -j$(nproc) V=s
          echo " "
          echo "make package/luci-app-vlmcsd/{clean,compile} -j$(nproc)"
          make package/luci-app-vlmcsd/{clean,compile} -j$(nproc) V=s          
          echo " "
          echo "make package/luci-app-passwall2/{clean,compile} -j$(nproc)"
          make package/luci-app-passwall2/{clean,compile} -j$(nproc) V=s
          echo " "
          echo "make package/luci-app-advanced-reboot/{clean,compile} -j$(nproc)"
          make package/luci-app-advanced-reboot/{clean,compile} -j$(nproc) V=s
          echo " "
          echo "make package/luci-app-cpu-status/{clean,compile} -j$(nproc)"
          make package/luci-app-cpu-status/{clean,compile} -j$(nproc) V=s
          echo " "
          echo "make package/luci-app-log/{clean,compile} -j$(nproc)"
          make package/luci-app-log/{clean,compile} -j$(nproc) V=s
          echo " "
          echo "make package/luci-app-natmapt/{clean,compile} -j$(nproc)"
          make package/luci-app-natmapt/{clean,compile} -j$(nproc) V=s
          echo " "
          echo "make package/luci-app-temp-status/{clean,compile} -j$(nproc)"
          make package/luci-app-temp-status/{clean,compile} -j$(nproc) V=s
          echo " "
          echo "make package/luci-theme-argon/{clean,compile} -j$(nproc)"
          make package/luci-theme-argon/{clean,compile} -j$(nproc) V=s
          echo " "

          mkdir -p ${GITHUB_WORKSPACE}/mypackage
          mv bin/packages/x86_64/mypackage/* ${GITHUB_WORKSPACE}/mypackage/
          echo "📂 已移动产物到: ${GITHUB_WORKSPACE}/mypackage"
          realpath "${GITHUB_WORKSPACE}/mypackage"
          ls -lh "${GITHUB_WORKSPACE}/mypackage"

          find "${GITHUB_WORKSPACE}/mypackage" -type f -name "*.ipk" -printf "%p\n"
          rm -f ../mypackage/natmapt_*.ipk || true
          rm -f ../mypackage/vlmcsd_*.ipk || true
          make clean
          rm .config .config.old
          rm -rf feeds/mypackage feeds/mypackage.*
          cd ..
          echo "status=success" >> $GITHUB_OUTPUT
          echo "FIRMWARE=$PWD" >> $GITHUB_ENV

      - name: Download release.txt
        uses: actions/download-artifact@v5
        with:
          name: release-info
          path: ${{ github.workspace }}

      - name: Fix missing versions from built ipks
        run: |
          out="${GITHUB_WORKSPACE}/release.txt"
          for ipk in $(find "${GITHUB_WORKSPACE}/mypackage" -type f -name "luci-*.ipk"); do
            fname=$(basename "$ipk")
            pkg=$(echo "$fname" | cut -d_ -f1)
            ver=$(echo "$fname" | cut -d_ -f2)
            if grep -Fq "**:minidisc: $pkg**|**unknown**" "$out"; then
              sed -i "s|\*\*unknown\*\*|**$ver**|g" "$out"
              echo "✔️ 修正 $pkg 版本号为 $ver"
            fi
          done

      - name: Upload fixed release.txt
        uses: actions/upload-artifact@v4
        with:
          name: release-info-fixed
          path: release.txt
    
      - name: Upload mypackage ipks to release
        uses: softprops/action-gh-release@v2
        if: steps.compile.outputs.status == 'success'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{needs.job_check.outputs.release_time}}
          files: ${{ env.FIRMWARE }}/mypackage/*.ipk

  job_auto_compile:
    if: ${{ needs.job_check.outputs.has_update == 'true' && needs.job_check.outputs.prerelease == 'false' }}
    permissions:
      contents: write
    needs: job_check
    runs-on: ubuntu-latest
    name: build (${{ matrix.platform }})
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: x86_64
            url_sdk: https://downloads.openwrt.org/releases/24.10.3/targets/x86/64/openwrt-sdk-24.10.3-x86-64_gcc-13.3.0_musl.Linux-x86_64.tar.zst
            sdk_ver: "24.10"

          #- platform: aarch64_generic
          #  url_sdk: https://downloads.openwrt.org/releases/24.10.3/targets/rockchip/armv8/openwrt-sdk-24.10.3-rockchip-armv8_gcc-13.3.0_musl.Linux-x86_64.tar.zst
          #  sdk_ver: "24.10"

          - platform: aarch64_cortex-a53
            url_sdk: https://downloads.openwrt.org/releases/24.10.3/targets/mvebu/cortexa53/openwrt-sdk-24.10.3-mvebu-cortexa53_gcc-13.3.0_musl.Linux-x86_64.tar.zst
            sdk_ver: "24.10"

          #- platform: aarch64_cortex-a72
          #  url_sdk: https://downloads.openwrt.org/releases/24.10.3/targets/mvebu/cortexa72/openwrt-sdk-24.10.3-mvebu-cortexa72_gcc-13.3.0_musl.Linux-x86_64.tar.zst
          #  sdk_ver: "24.10"

          #- platform: arm_cortex-a5_vfpv4
          #  url_sdk: https://downloads.openwrt.org/releases/24.10.3/targets/at91/sama5/openwrt-sdk-24.10.3-at91-sama5_gcc-13.3.0_musl_eabi.Linux-x86_64.tar.zst
          #  sdk_ver: "24.10"

          #- platform: arm_cortex-a7
          #  url_sdk: https://downloads.openwrt.org/releases/24.10.3/targets/mediatek/mt7629/openwrt-sdk-24.10.3-mediatek-mt7629_gcc-13.3.0_musl_eabi.Linux-x86_64.tar.zst
          #  sdk_ver: "24.10"

          - platform: arm_cortex-a7_neon-vfpv4
            url_sdk: https://downloads.openwrt.org/releases/24.10.3/targets/sunxi/cortexa7/openwrt-sdk-24.10.3-sunxi-cortexa7_gcc-13.3.0_musl_eabi.Linux-x86_64.tar.zst
            sdk_ver: "24.10"

          #- platform: arm_cortex-a8_vfpv3
          #  url_sdk: https://downloads.openwrt.org/releases/24.10.3/targets/sunxi/cortexa8/openwrt-sdk-24.10.3-sunxi-cortexa8_gcc-13.3.0_musl_eabi.Linux-x86_64.tar.zst
          #  sdk_ver: "24.10"

          #- platform: arm_cortex-a9
          #  url_sdk: https://downloads.openwrt.org/releases/24.10.3/targets/bcm53xx/generic/openwrt-sdk-24.10.3-bcm53xx-generic_gcc-13.3.0_musl_eabi.Linux-x86_64.tar.zst
          #  sdk_ver: "24.10"

          #- platform: arm_cortex-a9_neon
          #  url_sdk: https://downloads.openwrt.org/releases/24.10.3/targets/zynq/generic/openwrt-sdk-24.10.3-zynq-generic_gcc-13.3.0_musl_eabi.Linux-x86_64.tar.zst
          #  sdk_ver: "24.10"

          #- platform: arm_cortex-a9_vfpv3-d16
          #  url_sdk: https://downloads.openwrt.org/releases/24.10.3/targets/mvebu/cortexa9/openwrt-sdk-24.10.3-mvebu-cortexa9_gcc-13.3.0_musl_eabi.Linux-x86_64.tar.zst
          #  sdk_ver: "24.10"

          #- platform: arm_cortex-a15_neon-vfpv4
          #  url_sdk: https://downloads.openwrt.org/releases/24.10.3/targets/ipq806x/generic/openwrt-sdk-24.10.3-ipq806x-generic_gcc-13.3.0_musl_eabi.Linux-x86_64.tar.zst
          #  sdk_ver: "24.10"

          #- platform: mips_24kc
          #  url_sdk: https://downloads.openwrt.org/releases/24.10.3/targets/ath79/generic/openwrt-sdk-24.10.3-ath79-generic_gcc-13.3.0_musl.Linux-x86_64.tar.zst
          #  sdk_ver: "24.10"

          #- platform: mips_4kec
          #  url_sdk: https://downloads.openwrt.org/releases/24.10.3/targets/realtek/rtl838x/openwrt-sdk-24.10.3-realtek-rtl838x_gcc-13.3.0_musl.Linux-x86_64.tar.zst
          #  sdk_ver: "24.10"

          #- platform: mips_mips32
          #  url_sdk: https://downloads.openwrt.org/releases/24.10.3/targets/bcm53xx/generic/openwrt-sdk-24.10.3-bcm53xx-generic_gcc-13.3.0_musl_eabi.Linux-x86_64.tar.zst
          #  sdk_ver: "24.10"

          #- platform: mipsel_24kc
          #  url_sdk: https://downloads.openwrt.org/releases/24.10.3/targets/ramips/rt288x/openwrt-sdk-24.10.3-ramips-rt288x_gcc-13.3.0_musl.Linux-x86_64.tar.zst
          #  sdk_ver: "24.10"

          #- platform: mipsel_74kc
          #  url_sdk: https://downloads.openwrt.org/releases/24.10.3/targets/ramips/rt3883/openwrt-sdk-24.10.3-ramips-rt3883_gcc-13.3.0_musl.Linux-x86_64.tar.zst
          #  sdk_ver: "24.10"

          #- platform: mipsel_mips32
          #  url_sdk: https://downloads.openwrt.org/releases/24.10.3/targets/bcm47xx/generic/openwrt-sdk-24.10.3-bcm47xx-generic_gcc-13.3.0_musl.Linux-x86_64.tar.zst
          #  sdk_ver: "24.10"

    steps:
      - name: Initialization ${{ matrix.platform }} compile environment
        run: |
          sudo -E rm -rf /usr/share/dotnet /etc/mysql /etc/php /usr/local/lib/android
          echo "Install packages"
          sudo -E apt-get -qq update
          sudo -E apt-get -qq install ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential \
            bzip2 ccache clang cmake cpio curl device-tree-compiler ecj fastjar flex gawk gettext gcc-multilib \
            g++-multilib git gnutls-dev gperf haveged help2man intltool lib32gcc-s1 libc6-dev-i386 libelf-dev \
            libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses-dev libpython3-dev \
            libreadline-dev libssl-dev libtool libyaml-dev libz-dev lld llvm lrzsz mkisofs msmtp nano \
            ninja-build p7zip p7zip-full patch pkgconf python3 python3-pip python3-ply python3-docutils \
            python3-pyelftools qemu-utils re2c rsync scons squashfs-tools subversion swig texinfo uglifyjs \
            upx-ucl unzip vim wget xmlto xxd zlib1g-dev zstd
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean

      - name: ${{ matrix.platform }} sdk download
        run: |
          wget ${{ matrix.url_sdk }}
          file_name=$(echo ${{matrix.url_sdk}} | awk -F/ '{print $NF}')
          mkdir sdk
          if [[ $file_name == *.tar.xz ]]; then
            tar -xJf $file_name -C ./sdk --strip-components=1
          elif [[ $file_name == *.tar.zst ]]; then
            tar --zstd -x -f $file_name -C ./sdk --strip-components=1
          else
            echo "Unsupported file format: $file_name"
            exit 1
          fi
          cd sdk

      - name: SSH connection to Actions
        uses: mxschmitt/action-tmate@v3.22
        if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
          
      - name: ${{ matrix.platform }} feeds configuration packages
        run: |
          cd sdk
          cat > feeds.conf.default << EOF
          src-git passwall_packages https://github.com/${{ env.passwall2packs }}.git;main
          src-git passwall2 https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ env.passwall2 }}.git;${{ github.ref_name }}
          src-git base https://github.com/openwrt/openwrt.git;openwrt-${{ matrix.sdk_ver }}
          src-git packages https://github.com/openwrt/packages.git;openwrt-${{ matrix.sdk_ver }}
          src-git luci https://github.com/openwrt/luci.git;openwrt-${{ matrix.sdk_ver }}
          src-git routing https://github.com/openwrt/routing.git;openwrt-${{ matrix.sdk_ver }}
          src-git telephony https://github.com/openwrt/telephony.git;openwrt-${{ matrix.sdk_ver }}
          EOF

          ./scripts/feeds update -a
          ./scripts/feeds install -a

          git clone --depth 1 https://github.com/muink/openwrt-stuntman.git package/stuntman
          git clone --depth 1 https://github.com/muink/openwrt-natmapt.git package/natmapt
          git clone --depth 1 https://github.com/${{ env.vlmcsd }}.git package/vlmcsd

          #--------------------------------------begin_patches------------------------------------------
          echo "Start applying the patch"


          rm -rf temp_resp
          git clone -b master --single-branch https://github.com/openwrt/packages.git temp_resp
          cd temp_resp
          git checkout 2b99cd7d7637da0f152da378994f699aaf0dd44d
          cd ..
          echo "update golang version"
          rm -rf feeds/packages/lang/golang
          cp -r temp_resp/lang/golang feeds/packages/lang
          echo "update rust version"
          rm -rf feeds/packages/lang/rust
          cp -r temp_resp/lang/rust feeds/packages/lang
          rm -rf temp_resp

          echo "fixed rust host build error"
          sed -i 's/--set=llvm\.download-ci-llvm=false/--set=llvm.download-ci-llvm=true/' feeds/packages/lang/rust/Makefile
          grep -q -- '--ci false \\' feeds/packages/lang/rust/Makefile || sed -i '/x\.py \\/a \        --ci false \\' feeds/packages/lang/rust/Makefile


          echo "Patch application completed"
          #--------------------------------------end_patches--------------------------------------------


          echo "CONFIG_ALL_NONSHARED=n" > .config
          echo "CONFIG_ALL_KMODS=n" >> .config
          echo "CONFIG_ALL=n" >> .config
          echo "CONFIG_AUTOREMOVE=n" >> .config
          echo "CONFIG_SIGNED_PACKAGES=n" >> .config
          echo "CONFIG_PACKAGE_stuntman=m" >> .config
          echo "CONFIG_PACKAGE_stuntman-client=m" >> .config
          echo "CONFIG_PACKAGE_vlmcsd=m" >> .config
          echo "CONFIG_PACKAGE_natmapt=m" >> .config
          for sub in \
            natmapt-client-script-transmission \
            natmapt-client-script-deluge \
            natmapt-notify-script-pushbullet \
            natmapt-notify-script-pushover \
            natmapt-notify-script-telegram; do
              echo "CONFIG_PACKAGE_${sub}=m" >> .config
          done
          
          echo "CONFIG_PACKAGE_luci-app-passwall2=m" >> .config
          for opt in \
            Iptables_Transparent_Proxy \
            Nftables_Transparent_Proxy \
            INCLUDE_Haproxy \
            INCLUDE_Hysteria \
            INCLUDE_IPv6_Nat \
            INCLUDE_NaiveProxy \
            INCLUDE_Shadowsocks_Libev_Client \
            INCLUDE_Shadowsocks_Libev_Server \
            INCLUDE_Shadowsocks_Rust_Client \
            INCLUDE_Shadowsocks_Rust_Server \
            INCLUDE_ShadowsocksR_Libev_Client \
            INCLUDE_ShadowsocksR_Libev_Server \
            INCLUDE_Simple_Obfs \
            INCLUDE_SingBox \
            INCLUDE_tuic_client \
            INCLUDE_V2ray_Plugin; do
              echo "CONFIG_PACKAGE_luci-app-passwall2_${opt}=y" >> .config
          done

          make defconfig
          
      - name: ${{ matrix.platform }} download
        run: |
          cd sdk
          make download -j$(nproc)
          find dl -size -1024c -exec ls -l {} \;

      - name: ${{ matrix.platform }} compile
        id: compile
        run: |
          cd sdk
          make package/feeds/passwall_packages/chinadns-ng/compile -j$(nproc) V=s
          make package/feeds/passwall_packages/geoview/compile -j$(nproc) V=s
          make package/feeds/passwall_packages/tcping/compile -j$(nproc) V=s
          make package/feeds/passwall_packages/xray-core/compile -j$(nproc) V=s
          make package/feeds/passwall_packages/v2ray-geodata/compile -j$(nproc) V=s
          make package/feeds/passwall_packages/hysteria/compile -j$(nproc) V=s
          make package/feeds/passwall_packages/naiveproxy/compile -j$(nproc) V=s
          make package/feeds/passwall_packages/shadowsocks-rust/compile -j$(nproc) V=s
          make package/feeds/passwall_packages/shadowsocksr-libev/compile -j$(nproc) V=s
          make package/feeds/passwall_packages/simple-obfs/compile -j$(nproc) V=s
          make package/feeds/passwall_packages/sing-box/compile -j$(nproc) V=s
          make package/feeds/passwall_packages/tuic-client/compile -j$(nproc) V=s
          make package/feeds/passwall_packages/v2ray-plugin/compile -j$(nproc) V=s
          make package/stuntman/{clean,compile} -j$(nproc) V=s
          make package/natmapt/{clean,compile} -j$(nproc) V=s
          make package/vlmcsd/{clean,compile} -j$(nproc) V=s
          echo "status=success" >> $GITHUB_OUTPUT
        
      - name: Organize ${{ matrix.platform }} files
        id: organize
        if: steps.compile.outputs.status == 'success'
        run: |
          cd sdk
          mkdir -p upload/${{ matrix.platform }}/packages
          cp bin/packages/*/passwall_packages/*.ipk upload/${{ matrix.platform }}/packages/ || true
          cp bin/packages/*/base/stuntman-client*.ipk upload/${{ matrix.platform }}/packages/ || true
          cp bin/packages/*/base/natmapt*.ipk upload/${{ matrix.platform }}/packages/ || true
          cp bin/packages/*/base/vlmcsd*.ipk upload/${{ matrix.platform }}/packages/ || true

          echo "FIRMWARE=$PWD" >> $GITHUB_ENV
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Download fixed release.txt
        uses: actions/download-artifact@v5
        with:
          name: release-info-fixed
          path: ${{ github.workspace }}
    
      - name: Generate release info
        id: info
        if: steps.compile.outputs.status == 'success'
        run: |
          cd sdk
          out="${GITHUB_WORKSPACE}/release.txt"
          echo "### Packages Version" >> "$out"
          echo "**Package name**|**Version**" >> "$out"
          echo "-|-" >> "$out"

          extract_version() {
            local mf="$1"
            local version=""
            local release=""
            echo "[DEBUG] Extracting version for $pkg from $mf" >&2

            if [[ "$pkg" == natmapt-client-* || "$pkg" == natmapt-notify-* ]]; then
              version=$(awk -F ':=' '/^SCRIPTS_VERSION:=/{print $2}' "$mf" | sed 's/[[:space:]]//g')
              if [ -n "$version" ]; then
                echo "[DEBUG] $pkg uses SCRIPTS_VERSION=$version" >&2
                echo "${version}-r1"
                return 0
              fi
            fi

            release=$(awk -F ':=' '/^PKG_RELEASE:=/{print $2}' "$mf" | sed 's/[[:space:]]//g')
            [ -z "$release" ] && release="1"
            echo "[DEBUG] PKG_RELEASE=$release" >&2

            version=$(awk -F ':=' '/^PKG_VERSION:=/{print $2}' "$mf" | sed 's/[[:space:]]//g')
            if [ -n "$version" ]; then
              echo "[DEBUG] Found PKG_VERSION raw=$version" >&2
              case "$version" in
                *'$('* ) echo "[DEBUG] PKG_VERSION contains make expr, skip direct use" >&2 ;;
                * ) echo "${version}-r${release}"; return 0 ;;
              esac
            fi

            local up=$(awk -F ':=' '/^PKG_UPSTREAM_VERSION:=/{print $2}' "$mf" | sed 's/[[:space:]]//g')
            local gh=$(awk -F ':=' '/^PKG_UPSTREAM_GITHASH:=/{print $2}' "$mf" | sed 's/[[:space:]]//g')
            echo "[DEBUG] PKG_UPSTREAM_VERSION=$up PKG_UPSTREAM_GITHASH=$gh" >&2
            if [ -n "$up" ]; then
              if [ -n "$gh" ]; then
                echo "${up}~${gh:0:7}-r${release}"
              else
                echo "${up}-r${release}"
              fi
              return 0
            fi

            local date=$(awk -F ':=' '/^PKG_SOURCE_DATE:=/{print $2}' "$mf" | sed 's/[[:space:]]//g')
            local srcver=$(awk -F ':=' '/^PKG_SOURCE_VERSION:=/{print $2}' "$mf" | sed 's/[[:space:]]//g')
            echo "[DEBUG] PKG_SOURCE_DATE=$date PKG_SOURCE_VERSION=$srcver" >&2
            if [ -n "$date" ] && [ -n "$srcver" ]; then
              echo "${date}~${srcver}-r${release}"
              return 0
            fi

            local control_file=$(find build_dir -type f -path "*/ipkg-*/control" | grep "$(basename "$(dirname "$mf")")" | head -n1)
            echo "[DEBUG] control_file=$control_file" >&2
            if [ -n "$control_file" ]; then
              version=$(grep '^Version:' "$control_file" | awk '{print $2}')
              [ -n "$version" ] && echo "$version" && return 0
            fi

            echo "[DEBUG] No version found, return unknown" >&2
            echo "unknown"
          }
          
          pkgs=$(ls feeds/passwall_packages -I v2ray-geodata | grep -E "chinadns-ng|geoview|tcping|xray-core|hysteria|naiveproxy|shadowsocks-rust|shadowsocksr-libev|simple-obfs|sing-box|tuic-client|v2ray-plugin")

          subpkgs_natmapt=$(awk '/^define Package\//{print $2}' package/natmapt/Makefile | cut -d/ -f2)
          pkgname_stuntman=$(awk -F ':=' '/^PKG_NAME:=/{print $2}' package/stuntman/Makefile | sed 's/[[:space:]]//g')

          subpkgs_stuntman=$(awk '/^define Package\//{print $2}' package/stuntman/Makefile \
            | sed "s/\$(PKG_NAME)/$pkgname_stuntman/g" \
            | cut -d/ -f2)

          echo "[DEBUG] pkgs=$pkgs" >&2
          echo "[DEBUG] subpkgs_natmapt=$subpkgs_natmapt" >&2
          echo "[DEBUG] subpkgs_stuntman=$subpkgs_stuntman" >&2

          declare -A seen_pkgs

          for pkg in $pkgs $subpkgs_natmapt $subpkgs_stuntman; do
            if ! grep -q "CONFIG_PACKAGE_${pkg}=m" .config && \
               ! grep -q "CONFIG_PACKAGE_${pkg}=y" .config; then
              echo "[DEBUG] $pkg not enabled in .config, skip" >&2
              continue
            fi

            if [[ -n "${seen_pkgs[$pkg]}" ]]; then
              continue
            fi

            # 只保留 stuntman-client
            if [[ "$pkg" == stuntman* && "$pkg" != "stuntman-client" ]]; then
              echo "[DEBUG] Skip $pkg (only keep stuntman-client)" >&2
              continue
            fi
            
            mf=""
            for base in feeds/passwall_packages package/stuntman package/natmapt; do
              if [ -f "$base/$pkg/Makefile" ]; then
                mf="$base/$pkg/Makefile"
                echo "[DEBUG] Found Makefile for $pkg at $mf" >&2
              fi
            done

            if [ -z "$mf" ]; then
              if echo "$subpkgs_natmapt" | grep -q "^$pkg$"; then
                mf="package/natmapt/Makefile"
              elif echo "$subpkgs_stuntman" | grep -q "^$pkg$"; then
                mf="package/stuntman/Makefile"
              fi
            fi
            
            if [ -z "$mf" ]; then
              echo "[DEBUG] No Makefile found for $pkg, skip" >&2
              continue
            fi

            version=$(extract_version "$mf" "$pkg")
            echo "[DEBUG] Final version for $pkg=$version" >&2
            echo "**:ice_cube: $pkg**|**${version}**" >> "$out"

            seen_pkgs[$pkg]=1
          done
          
          if grep -q "CONFIG_PACKAGE_v2ray-geodata" .config; then
            echo "**:ice_cube: v2ray-geoip**|**$(awk -F ':=' '/GEOIP_VER:=/{print $2}' feeds/passwall_packages/v2ray-geodata/Makefile)**" >> "$out"
            echo "**:ice_cube: v2ray-geosite**|**$(awk -F ':=' '/GEOSITE_VER:=/{print $2}' feeds/passwall_packages/v2ray-geodata/Makefile)**" >> "$out"
          fi

          touch "$out"
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Upload firmware to release
        uses: softprops/action-gh-release@v2
        if: steps.info.outputs.status == 'success'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{needs.job_check.outputs.release_time}}
          body_path: release.txt
          files: ${{ env.FIRMWARE }}/upload/**/*

      - name: Delete old releases and tags, keep latest 3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
        run: |
          releases=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/$REPO/releases?per_page=100" \
            | jq -r 'sort_by(.created_at) | reverse | .[].tag_name')

          timestamp_releases=$(echo "$releases" | grep -E '^[0-9]{8}-[0-9]{6}$')
          echo "All timestamp releases:"
          echo "$timestamp_releases"

          # 保留最新 3 个
          keep_tags=$(echo "$timestamp_releases" | head -n 3)
          delete_tags=$(echo "$timestamp_releases" | tail -n +4)

          echo "Keep tags:"
          echo "$keep_tags"

          echo "Delete tags:"
          echo "$delete_tags"

          # 删除多余的 Release 和对应 tag
          for tag in $delete_tags; do
            echo "Deleting release and tag: $tag"

            release_id=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
              "https://api.github.com/repos/$REPO/releases/tags/$tag" \
              | jq -r '.id')

            if [ "$release_id" != "null" ]; then
              curl -s -X DELETE -H "Authorization: token $GITHUB_TOKEN" \
                "https://api.github.com/repos/$REPO/releases/$release_id"
            fi

            curl -s -X DELETE -H "Authorization: token $GITHUB_TOKEN" \
              "https://api.github.com/repos/$REPO/git/refs/tags/$tag"
          done

          # 额外：清理没有 Release 的孤立 timestamp tag
          all_tags=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/$REPO/git/refs/tags" \
            | jq -r '.[].ref' | sed 's|refs/tags/||')

          for tag in $all_tags; do
            if echo "$tag" | grep -Eq '^[0-9]{8}-[0-9]{6}$'; then
              if ! echo "$keep_tags" | grep -qx "$tag"; then
                echo "Deleting orphan timestamp tag: $tag"
                curl -s -X DELETE -H "Authorization: token $GITHUB_TOKEN" \
                  "https://api.github.com/repos/$REPO/git/refs/tags/$tag"
              fi
            fi
          done
